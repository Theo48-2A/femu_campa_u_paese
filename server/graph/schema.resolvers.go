package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"server/graph/model"
	"time"

	jwt "github.com/golang-jwt/jwt/v5"
)

// Résolveur pour la mutation `login`
func (r *mutationResolver) Login(ctx context.Context, username string, password string) (*model.AuthResponse, error) {
	// Remplacez cette partie par une vraie validation (par exemple, base de données)
	if username != "admin" || password != "password123" {
		return nil, errors.New("invalid username or password")
	}

	// Créer un token JWT
	expirationTime := time.Now().Add(15 * time.Minute) // Token valide 15 minutes
	claims := &Claims{
		Username: username,
		RegisteredClaims: jwt.RegisteredClaims{
			ExpiresAt: jwt.NewNumericDate(expirationTime),
		},
	}

	token := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)
	tokenString, err := token.SignedString(jwtKey)
	if err != nil {
		return nil, errors.New("could not create token")
	}

	// Retourner le token et les informations utilisateur
	return &model.AuthResponse{
		Token: tokenString,
		User: &model.User{
			ID:       "1", // Id utilisateur fictif pour le test
			Username: username,
		},
	}, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
